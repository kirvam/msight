package Dancer5::App;
use Dancer2;

use DBI;
use File::Spec;
#use File::Slurp;
use Template;
use Dancer2::Plugin::Database;
use DBD::mysql;
use Template;
use HTML::Entities qw( encode_entities );
use Data::Dumper;

#set 'database'     => File::Spec->catfile(File::Spec->tmpdir(), 'dancr.db');
set 'session'      => 'Simple';
set 'template'     => 'template_toolkit';
set 'logger'       => 'console';
set 'log'          => 'debug';
set 'show_errors'  => 1;
set 'startup_info' => 1;
set 'warnings'     => 1;
set 'username'     => 'admin';
set 'password'     => 'password';
set 'layout'       => 'main';

our $VERSION = '0.1';

my $flash;

get '/INDEX' => sub {
    template 'index';
};

sub set_flash {
     my $message = shift;

     $flash = $message;
}

sub get_flash {

     my $msg = $flash;
     $flash = "";

     return $msg;
}

###sub connect_db {
###     my $dbh = DBI->connect("dbi:SQLite:dbname=".setting('database')) or
###         die $DBI::errstr;
###     return $dbh;
###}

sub connect_db {
                 my $sth = database({driver => 'mysql',
                                     database => 'nfr_m',
                                     host => 'localhost',
                                     port => '3306',
                                     username => 'phaigh',
                                     password => 'v22osprey'});

#->prepare('SELECT req_md_ids, req_d_ver, req_d_rid, left(req_d_rrq,60) AS det, req_d_rrq as fdet FROM req_data ' .
#                   "WHERE req_md_ids IN ($ids_joined) ORDER BY req_d_ver");
#                   ###"WHERE req_d_ids IN ($ids_joined) ORDER BY FIELD(req_d_ver, $ids_joined)");
#                my $sql_string = "SELECT req_md_ids, req_d_ver, req_d_rid, left(req_d_rrq,60) AS det, req_d_rrq as fdet FROM req_data " . "WHERE req_d_ids IN ($ids_joined) ORDER BY req_d_ver";
#                   $sth->execute;
#
#                  # Fetch all results as an arrayref of hashrefs
#                     $documents = $sth->fetchall_arrayref({});
#             ###        print Dumper \$sql_string;
#             ###        print Dumper \$ids_joined;
#                     print Dumper \$documents;
  return $sth;
};


sub init_db {
     my $db = connect_db();
    # my $schema = read_file('./schema.sql');
     my $schema = "create table if not exists req_note ( id mediumint not null auto_increment, req_n_id VARCHAR(20) NOT NULL, req_n_note VARCHAR(50) not null, primary key (id) );"; 
     $db->do($schema) or die $db->errstr;
}

hook before_template => sub {
     my $tokens = shift;

     $tokens->{'css_url'} = request->base . 'css/style.css';
     $tokens->{'login_url'} = uri_for('/login');
     $tokens->{'logout_url'} = uri_for('/logout');
};

get '/' => sub {
     my $db = connect_db();
     my $sql = 'select id, req_n_id, req_n_note from req_note order by id desc';
     my $sth = $db->prepare($sql) or die $db->errstr;
     $sth->execute or die $sth->errstr;
     template 'show_entries.tt', {
         'msg' => get_flash(),
         'add_entry_url' => uri_for('/add'),
         'req_note' => $sth->fetchall_hashref('id'),
     };
###       print "<tt>",$sth->fetchall_hashref('id'),"</tt>\n";
};

post '/add' => sub {
     if ( not session('logged_in') ) {
         send_error("Not logged in", 401);
     }

     my $db = connect_db();
     my $sql = 'insert into req_note (req_n_id, req_n_note) values (?, ?)';
     my $sth = $db->prepare($sql) or die $db->errstr;
     $sth->execute(params->{'req_n_id'}, params->{'req_n_note'}) or die $sth->errstr;

     set_flash('New entry posted!');
     redirect '/';
};

any ['get', 'post'] => '/login' => sub {
     my $err;

     if ( request->method() eq "POST" ) {
         # process form input
         if ( params->{'username'} ne setting('username') ) {
             $err = "Invalid username";
         }
         elsif ( params->{'password'} ne setting('password') ) {
             $err = "Invalid password";
         }
         else {
             session 'logged_in' => true;
             set_flash('You are logged in.');
             return redirect '/';
         }
    }

    # display login form
    template 'login.tt', {
        'err' => $err,
    };

};

get '/logout' => sub {
    app->destroy_session;
    set_flash('You are logged out.');
    redirect '/';
};

init_db();

start;

true;
